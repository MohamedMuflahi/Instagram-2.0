{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Post() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.mainView,\n    children: [_jsx(Button, {\n      title: \"Pick an image from camera roll\",\n      onPress: pickImage\n    }), image && _jsx(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  mainView: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default Post;","map":{"version":3,"sources":["/home/mohamed/code/labs/projects/Gram/front-end/instagram/screens/Post.js"],"names":["React","useState","ImagePicker","Post","image","setImage","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","styles","mainView","width","height","StyleSheet","create","flex","alignItems","justifyContent"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;;;AACA,SAASC,IAAT,GAAe;AACX,kBAA0BF,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AAEF,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGJ,WAAW,CAACK,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEN,WAAW,CAACO,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CAFH;;AAAA;AAEZC,YAAAA,MAFY;AAShBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAuB;AACrBZ,cAAAA,QAAQ,CAACS,MAAM,CAACI,GAAR,CAAR;AACD;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAgBE,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,QAApB;AAAA,eACI,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,gCAAd;AAA+C,MAAA,OAAO,EAAEd;AAAxD,MADJ,EAEKF,KAAK,IAAI,KAAC,KAAD;AAAO,MAAA,MAAM,EAAE;AAAEc,QAAAA,GAAG,EAAEd;AAAP,OAAf;AAA+B,MAAA,KAAK,EAAE;AAAEiB,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAAtC,MAFd;AAAA,IADJ;AAMH;;AACD,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,QAAQ,EAAC;AACJK,IAAAA,IAAI,EAAE,CADF;AACKC,IAAAA,UAAU,EAAE,QADjB;AAC2BC,IAAAA,cAAc,EAAE;AAD3C;AADoB,CAAlB,CAAf;AAKA,eAAexB,IAAf","sourcesContent":["import React,{useState} from 'react';\nimport { Text,View,StyleSheet,Button} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nfunction Post(){\n    const [image, setImage] = useState(null);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n    return (\n        <View style={styles.mainView}>\n            <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n        </View>\n    );\n}\nconst styles = StyleSheet.create({\n    mainView:{\n         flex: 1, alignItems: 'center', justifyContent: 'center' \n    },\n})\nexport default Post;"]},"metadata":{},"sourceType":"module"}