{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useIsFocused } from '@react-navigation/native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nfunction OptionPicker(_ref) {\n  var navigation = _ref.navigation;\n  var isFocused = useIsFocused();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      photo = _useState2[0],\n      setPhoto = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasPermission = _useState4[0],\n      setHasPermission = _useState4[1];\n\n  var _useState5 = useState(Camera.Constants.Type.back),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var camera;\n\n  var takePicture = function takePicture() {\n    if (camera) {\n      camera.takePictureAsync({\n        onPictureSaved: onPictureSaved\n      });\n    }\n  };\n\n  var onPictureSaved = function onPictureSaved(photo) {\n    setPhoto(photo.uri);\n    navigation.navigate('Photo', {\n      image: photo\n    });\n    console.log(photo);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return _jsx(View, {});\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  var turnOnCamera = function turnOnCamera() {};\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [isFocused && _jsx(Camera, {\n      style: styles.camera,\n      type: type,\n      ref: function ref(_ref2) {\n        camera = _ref2;\n      },\n      children: _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n          },\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \" Flip \"\n          })\n        })\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.captureButton,\n      onPress: function onPress() {\n        takePicture();\n      }\n    })]\n  });\n}\n\nfunction PhotoTaken(_ref3) {\n  var route = _ref3.route;\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      caption = _useState8[0],\n      setCaption = _useState8[1];\n\n  var image = route.params.image;\n  return _jsxs(_Fragment, {\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: image.uri\n      }\n    }), _jsx(TextInput, {\n      style: styles.caption,\n      onChangeText: setCaption,\n      value: caption,\n      placeholder: \"Write a caption\",\n      placeholderTextColor: \"rgba(255, 255, 255, 0.5)\"\n    })]\n  });\n}\n\nfunction Camer() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"Take Picture\",\n      component: OptionPicker,\n      options: {\n        unmountOnBlur: true\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Photo\",\n      component: PhotoTaken,\n      options: {\n        headerRight: function headerRight() {\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return alert('This is a button!');\n            },\n            style: styles.headerButton,\n            children: _jsx(Ionicons, {\n              name: \"ios-checkmark\",\n              size: 25,\n              color: \"black\"\n            })\n          });\n        }\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  },\n  captureButton: {\n    backgroundColor: 'black',\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    borderRadius: 180,\n    marginVertical: 20,\n    width: 75,\n    height: 75\n  },\n  image: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height / 1.5\n  },\n  caption: {\n    marginBottom: 20,\n    width: Dimensions.get('window').width * 0.9,\n    height: 50,\n    borderRadius: 5,\n    paddingLeft: 20,\n    marginTop: 20,\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    backgroundColor: \"black\",\n    color: \"#fff\"\n  },\n  headerButton: {\n    marginRight: 20,\n    height: 25,\n    width: 25\n  }\n});\nexport default Camer;","map":{"version":3,"sources":["/home/mohamed/code/labs/projects/Gram/front-end/instagram/components/Camer.js"],"names":["React","useState","useEffect","ImagePicker","Camera","createStackNavigator","useIsFocused","Ionicons","Stack","OptionPicker","navigation","isFocused","photo","setPhoto","hasPermission","setHasPermission","Constants","Type","back","type","setType","camera","takePicture","takePictureAsync","onPictureSaved","uri","navigate","image","console","log","requestCameraPermissionsAsync","status","turnOnCamera","styles","container","ref","buttonContainer","button","front","text","captureButton","PhotoTaken","route","caption","setCaption","params","Camer","unmountOnBlur","headerRight","alert","headerButton","StyleSheet","create","flex","backgroundColor","flexDirection","margin","alignSelf","alignItems","fontSize","color","marginRight","marginLeft","borderRadius","marginVertical","width","height","Dimensions","get","marginBottom","paddingLeft","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,oBAAT,QAAqC,yBAArC;;AAEA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,QAAP,MAAqB,6BAArB;;;;AACA,IAAMC,KAAK,GAAGH,oBAAoB,EAAlC;;AACA,SAASI,YAAT,OAAmC;AAAA,MAAZC,UAAY,QAAZA,UAAY;AACjC,MAAMC,SAAS,GAAGL,YAAY,EAA9B;;AACA,kBAA0BL,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA0CZ,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOa,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAAwBd,QAAQ,CAACG,MAAM,CAACY,SAAP,CAAiBC,IAAjB,CAAsBC,IAAvB,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAIC,MAAJ;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,gBAAP,CAAwB;AAAEC,QAAAA,cAAc,EAAEA;AAAlB,OAAxB;AACD;AACF,GAJD;;AAMA,MAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAAZ,KAAK,EAAI;AAC9BC,IAAAA,QAAQ,CAACD,KAAK,CAACa,GAAP,CAAR;AAEAf,IAAAA,UAAU,CAACgB,QAAX,CAAoB,OAApB,EAA6B;AACzBC,MAAAA,KAAK,EAAEf;AADkB,KAA7B;AAGEgB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACD,GAPH;;AAQEV,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BE,MAAM,CAAC0B,6BAAP,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAEChB,cAAAA,gBAAgB,CAACgB,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAIjB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,KAAC,IAAD,KAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACD;;AACH,MAAMkB,YAAY,GAAG,SAAfA,YAAe,GAAK,CAEzB,CAFD;;AAGA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACCvB,SAAS,IAAG,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAEsB,MAAM,CAACZ,MAAtB;AAA8B,MAAA,IAAI,EAAEF,IAApC;AAA0C,MAAA,GAAG,EAAE,aAAAgB,KAAG,EAAI;AACnEd,QAAAA,MAAM,GAAGc,KAAT;AACD,OAFc;AAAA,gBAGP,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,eAApB;AAAA,kBACE,KAAC,gBAAD;AACE,UAAA,KAAK,EAAEH,MAAM,CAACI,MADhB;AAEE,UAAA,OAAO,EAAE,mBAAM;AACbjB,YAAAA,OAAO,CACLD,IAAI,KAAKf,MAAM,CAACY,SAAP,CAAiBC,IAAjB,CAAsBC,IAA/B,GACId,MAAM,CAACY,SAAP,CAAiBC,IAAjB,CAAsBqB,KAD1B,GAEIlC,MAAM,CAACY,SAAP,CAAiBC,IAAjB,CAAsBC,IAHrB,CAAP;AAKD,WARH;AAAA,oBAUE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEe,MAAM,CAACM,IAApB;AAAA;AAAA;AAVF;AADF;AAHO,MADb,EAqBQ,KAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEN,MAAM,CAACO,aAAhC;AAA+C,MAAA,OAAO,EAAE,mBAAI;AAAClB,QAAAA,WAAW;AAAG;AAA3E,MArBR;AAAA,IADF;AAyBD;;AACD,SAASmB,UAAT,QAA4B;AAAA,MAAPC,KAAO,SAAPA,KAAO;;AAC1B,mBAA8BzC,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAO0C,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAQjB,KAAR,GAAkBe,KAAK,CAACG,MAAxB,CAAQlB,KAAR;AACA,SACC;AAAA,eACE,KAAC,KAAD;AAAO,MAAA,KAAK,EAAEM,MAAM,CAACN,KAArB;AAA4B,MAAA,MAAM,EAAE;AAACF,QAAAA,GAAG,EAAEE,KAAK,CAACF;AAAZ;AAApC,MADF,EAEE,KAAC,SAAD;AACG,MAAA,KAAK,EAAEQ,MAAM,CAACU,OADjB;AAEG,MAAA,YAAY,EAAEC,UAFjB;AAGG,MAAA,KAAK,EAAED,OAHV;AAIG,MAAA,WAAW,EAAC,iBAJf;AAKG,MAAA,oBAAoB,EAAC;AALxB,MAFF;AAAA,IADD;AAYD;;AACD,SAASG,KAAT,GAAgB;AAEZ,SACE,MAAC,KAAD,CAAO,SAAP;AAAA,eACE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,cAAnB;AAAkC,MAAA,SAAS,EAAErC,YAA7C;AAA2D,MAAA,OAAO,EAAE;AAACsC,QAAAA,aAAa,EAAE;AAAhB;AAApE,MADF,EAEE,KAAC,KAAD,CAAO,MAAP;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,SAAS,EAAEN,UAAtC;AAAkD,MAAA,OAAO,EAAE;AACzDO,QAAAA,WAAW,EAAE;AAAA,iBACX,KAAC,gBAAD;AACE,YAAA,OAAO,EAAE;AAAA,qBAAMC,KAAK,CAAC,mBAAD,CAAX;AAAA,aADX;AAEE,YAAA,KAAK,EAAEhB,MAAM,CAACiB,YAFhB;AAAA,sBAGC,KAAC,QAAD;AAAU,cAAA,IAAI,EAAC,eAAf;AAA+B,cAAA,IAAI,EAAE,EAArC;AAAyC,cAAA,KAAK,EAAC;AAA/C;AAHD,YADW;AAAA;AAD4C;AAA3D,MAFF;AAAA,IADF;AAaH;;AACD,IAAMjB,MAAM,GAAGkB,UAAU,CAACC,MAAX,CAAkB;AAI7BlB,EAAAA,SAAS,EAAE;AACPmB,IAAAA,IAAI,EAAE;AADC,GAJkB;AAO3BhC,EAAAA,MAAM,EAAE;AACNgC,IAAAA,IAAI,EAAE;AADA,GAPmB;AAU3BjB,EAAAA,eAAe,EAAE;AACfiB,IAAAA,IAAI,EAAE,CADS;AAEfC,IAAAA,eAAe,EAAE,aAFF;AAGfC,IAAAA,aAAa,EAAE,KAHA;AAIfC,IAAAA,MAAM,EAAE;AAJO,GAVU;AAgB3BnB,EAAAA,MAAM,EAAE;AACNgB,IAAAA,IAAI,EAAE,GADA;AAENI,IAAAA,SAAS,EAAE,UAFL;AAGNC,IAAAA,UAAU,EAAE;AAHN,GAhBmB;AAqB3BnB,EAAAA,IAAI,EAAE;AACJoB,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,KAAK,EAAE;AAFH,GArBqB;AAyB3BpB,EAAAA,aAAa,EAAC;AACZc,IAAAA,eAAe,EAAE,OADL;AAEZO,IAAAA,WAAW,EAAE,MAFD;AAGZC,IAAAA,UAAU,EAAE,MAHA;AAIZC,IAAAA,YAAY,EAAC,GAJD;AAKZC,IAAAA,cAAc,EAAE,EALJ;AAMZC,IAAAA,KAAK,EAAE,EANK;AAMDC,IAAAA,MAAM,EAAE;AANP,GAzBa;AAiC3BvC,EAAAA,KAAK,EAAC;AACJsC,IAAAA,KAAK,EAAEE,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBH,KAD5B;AAEJC,IAAAA,MAAM,EAACC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,GAAgC;AAFnC,GAjCqB;AAqC3BvB,EAAAA,OAAO,EAAC;AACN0B,IAAAA,YAAY,EAAE,EADR;AAENJ,IAAAA,KAAK,EAAEE,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBH,KAAzB,GAA+B,GAFhC;AAGNC,IAAAA,MAAM,EAAE,EAHF;AAINH,IAAAA,YAAY,EAAE,CAJR;AAKNO,IAAAA,WAAW,EAAE,EALP;AAMNC,IAAAA,SAAS,EAAE,EANL;AAONV,IAAAA,WAAW,EAAE,MAPP;AAQNC,IAAAA,UAAU,EAAE,MARN;AASNR,IAAAA,eAAe,EAAE,OATX;AAUNM,IAAAA,KAAK,EAAE;AAVD,GArCmB;AAiD3BV,EAAAA,YAAY,EAAC;AAEXW,IAAAA,WAAW,EAAE,EAFF;AAGXK,IAAAA,MAAM,EAAE,EAHG;AAIXD,IAAAA,KAAK,EAAE;AAJI;AAjDc,CAAlB,CAAf;AAwDA,eAAenB,KAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { Text,View,StyleSheet,TextInput,Image,Button,TouchableOpacity} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Dimensions } from 'react-native'\nimport { useIsFocused } from '@react-navigation/native';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nconst Stack = createStackNavigator();\nfunction OptionPicker({navigation}){\n  const isFocused = useIsFocused();\n  const [photo, setPhoto] = useState(null);\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  let camera;\n  const takePicture = () => {\n    if (camera) {\n      camera.takePictureAsync({ onPictureSaved: onPictureSaved });\n    }\n  };\n\n  const onPictureSaved = photo => {\n    setPhoto(photo.uri)\n    // here we will do the magic after it saves the photo\n    navigation.navigate('Photo', {\n        image: photo\n      })\n      console.log(photo);\n    } \n    useEffect(() => {\n      (async () => {\n        const { status } = await Camera.requestCameraPermissionsAsync();\n        setHasPermission(status === 'granted');\n      })();\n    }, []);\n    \n    if (hasPermission === null) {\n      return <View />;\n    }\n    if (hasPermission === false) {\n      return <Text>No access to camera</Text>;\n    }\n  const turnOnCamera = () =>{\n\n  }\n  return(\n    <View style={styles.container}>\n    {isFocused&& <Camera style={styles.camera} type={type} ref={ref => {\n    camera = ref;\n  }}>\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => {\n                setType(\n                  type === Camera.Constants.Type.back\n                    ? Camera.Constants.Type.front\n                    : Camera.Constants.Type.back\n                );\n              }}\n            >\n              <Text style={styles.text}> Flip </Text>\n            </TouchableOpacity>\n          </View>\n        </Camera>}\n        \n            \n            <TouchableOpacity style={styles.captureButton} onPress={()=>{takePicture()}} />\n            </View>\n  )\n}\nfunction PhotoTaken({route}){\n  const [caption, setCaption] = useState('');\n  const { image } = route.params;\n  return(\n   <>\n     <Image style={styles.image} source={{uri: image.uri}}/>\n     <TextInput\n        style={styles.caption}\n        onChangeText={setCaption}\n        value={caption}\n        placeholder=\"Write a caption\"\n        placeholderTextColor=\"rgba(255, 255, 255, 0.5)\"\n      />\n   </>\n  )\n}\nfunction Camer(){\n   \n    return(\n      <Stack.Navigator>\n        <Stack.Screen name='Take Picture' component={OptionPicker} options={{unmountOnBlur: true}} />\n        <Stack.Screen name='Photo' component={PhotoTaken} options={{\n          headerRight: () => (\n            <TouchableOpacity\n              onPress={() => alert('This is a button!')}\n              style={styles.headerButton}\n            ><Ionicons name='ios-checkmark' size={25} color='black' /></TouchableOpacity>\n          ),\n        }}/>\n      </Stack.Navigator>\n    )\n}\nconst styles = StyleSheet.create({\n    // mainView:{\n    //      flex: 1, alignItems: 'center', justifyContent: 'center' \n    // },\n    container: {\n        flex: 1,\n      },\n      camera: {\n        flex: 1,\n      },\n      buttonContainer: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        margin: 20,\n      },\n      button: {\n        flex: 0.1,\n        alignSelf: 'flex-end',\n        alignItems: 'center',\n      },\n      text: {\n        fontSize: 18,\n        color: 'white',\n      },\n      captureButton:{\n        backgroundColor: 'black',\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        borderRadius:180,\n        marginVertical: 20,\n        width: 75, height: 75,\n      },\n      image:{\n        width: Dimensions.get('window').width,\n        height:Dimensions.get('window').height/1.5,\n      },\n      caption:{\n        marginBottom: 20,\n        width: Dimensions.get('window').width*0.9,\n        height: 50,\n        borderRadius: 5,\n        paddingLeft: 20,\n        marginTop: 20,\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        backgroundColor: \"black\",\n        color: \"#fff\"\n      },\n      headerButton:{\n        // backgroundColor: 'black',\n        marginRight: 20,\n        height: 25,\n        width: 25,\n      },\n})\nexport default Camer;"]},"metadata":{},"sourceType":"module"}