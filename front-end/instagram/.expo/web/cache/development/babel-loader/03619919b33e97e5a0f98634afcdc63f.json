{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Camer from \"../components/Camer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Post() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      toggleCamera = _useState4[0],\n      setToggleCamera = _useState4[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [toggleCamera ? _jsx(Camer, {}) : _jsxs(_Fragment, {\n      children: [_jsx(Button, {\n        style: styles.button,\n        title: \"Pick an image from camera roll\",\n        onPress: pickImage\n      }), _jsx(Button, {\n        style: styles.button,\n        title: \"Take A Photo\",\n        onPress: function onPress() {\n          return setToggleCamera(!toggleCamera);\n        }\n      })]\n    }), image && _jsx(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    marginVertical: 500\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  },\n  captureButton: {\n    width: 200,\n    height: 200\n  }\n});\nexport default Post;","map":{"version":3,"sources":["/home/mohamed/code/labs/projects/Gram/front-end/instagram/screens/Post.js"],"names":["React","useState","useEffect","ImagePicker","Camer","Post","image","setImage","toggleCamera","setToggleCamera","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","styles","container","button","width","height","StyleSheet","create","flex","camera","buttonContainer","backgroundColor","flexDirection","margin","marginVertical","text","fontSize","color","captureButton"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,KAAP;;;;;AACA,SAASC,IAAT,GAAe;AACX,kBAA0BJ,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AACC,mBAAwCN,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOO,YAAP;AAAA,MAAqBC,eAArB;;AAEH,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGP,WAAW,CAACQ,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAET,WAAW,CAACU,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CAFH;;AAAA;AAEZC,YAAAA,MAFY;AAShBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAuB;AACnBd,cAAAA,QAAQ,CAACW,MAAM,CAACI,GAAR,CAAR;AACH;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAgBE,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACEhB,YAAY,GAEZ,KAAC,KAAD,KAFY,GAIZ;AAAA,iBACD,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAEe,MAAM,CAACE,MAAtB;AAA8B,QAAA,KAAK,EAAC,gCAApC;AAAqE,QAAA,OAAO,EAAEf;AAA9E,QADC,EAEA,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAEa,MAAM,CAACE,MAAtB;AAA8B,QAAA,KAAK,EAAC,cAApC;AAAmD,QAAA,OAAO,EAAE;AAAA,iBAAKhB,eAAe,CAAC,CAACD,YAAF,CAApB;AAAA;AAA5D,QAFA;AAAA,MALF,EAUOF,KAAK,IAAI,KAAC,KAAD;AAAO,MAAA,MAAM,EAAE;AAAEgB,QAAAA,GAAG,EAAEhB;AAAP,OAAf;AAA+B,MAAA,KAAK,EAAE;AAAEoB,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAAtC,MAVhB;AAAA,IADF;AAcH;;AACD,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAI7BL,EAAAA,SAAS,EAAE;AACPM,IAAAA,IAAI,EAAE;AADC,GAJkB;AAO3BC,EAAAA,MAAM,EAAE;AACND,IAAAA,IAAI,EAAE;AADA,GAPmB;AAU3BE,EAAAA,eAAe,EAAE;AACfF,IAAAA,IAAI,EAAE,CADS;AAEfG,IAAAA,eAAe,EAAE,aAFF;AAGfC,IAAAA,aAAa,EAAE,KAHA;AAIfC,IAAAA,MAAM,EAAE;AAJO,GAVU;AAgB3BV,EAAAA,MAAM,EAAE;AACPW,IAAAA,cAAc,EAAE;AADT,GAhBmB;AAmB3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,KAAK,EAAE;AAFH,GAnBqB;AAuB3BC,EAAAA,aAAa,EAAC;AACVd,IAAAA,KAAK,EAAC,GADI;AACCC,IAAAA,MAAM,EAAE;AADT;AAvBa,CAAlB,CAAf;AA2BA,eAAetB,IAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { Text,View,StyleSheet,Button,Image,TouchableOpacity} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport Camer from '../components/Camer'\nfunction Post(){\n    const [image, setImage] = useState(null);\n     const [toggleCamera, setToggleCamera] = useState(false)\n    \n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n        setImage(result.uri);\n    }\n};\n\n    return (\n      <View style={styles.container}>\n       {toggleCamera? \n       \n        <Camer></Camer>\n        : \n        <>\n       <Button style={styles.button} title=\"Pick an image from camera roll\" onPress={pickImage} />\n        <Button style={styles.button} title=\"Take A Photo\" onPress={()=> setToggleCamera(!toggleCamera)} />\n       </>\n        }\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      </View>\n    );\n}\nconst styles = StyleSheet.create({\n    // mainView:{\n    //      flex: 1, alignItems: 'center', justifyContent: 'center' \n    // },\n    container: {\n        flex: 1,\n      },\n      camera: {\n        flex: 1,\n      },\n      buttonContainer: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        margin: 20,\n      },\n      button: {\n       marginVertical: 500,\n      },\n      text: {\n        fontSize: 18,\n        color: 'white',\n      },\n      captureButton:{\n          width:200, height: 200,\n      },\n})\nexport default Post;"]},"metadata":{},"sourceType":"module"}