{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Camera } from \"expo-camera\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { useSelector } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nfunction OptionPicker(_ref) {\n  var navigation = _ref.navigation;\n  var isFocused = useIsFocused();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      photo = _useState2[0],\n      setPhoto = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasPermission = _useState4[0],\n      setHasPermission = _useState4[1];\n\n  var _useState5 = useState(Camera.Constants.Type.back),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var camera;\n\n  var takePicture = function takePicture() {\n    if (camera) {\n      camera.takePictureAsync({\n        onPictureSaved: onPictureSaved\n      });\n    }\n  };\n\n  var onPictureSaved = function onPictureSaved(photo) {\n    setPhoto(photo.uri);\n    navigation.navigate(\"Photo\", {\n      image: photo\n    });\n    console.log(\"photo\", photo);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === \"granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return _jsx(View, {});\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  var turnOnCamera = function turnOnCamera() {};\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [isFocused && _jsx(Camera, {\n      style: styles.camera,\n      type: type,\n      ref: function ref(_ref2) {\n        camera = _ref2;\n      },\n      children: _jsx(View, {\n        style: styles.buttonContainer,\n        children: _jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n          },\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \" Flip \"\n          })\n        })\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.captureButton,\n      onPress: function onPress() {\n        takePicture();\n      }\n    })]\n  });\n}\n\nfunction PhotoTaken(_ref3) {\n  var route = _ref3.route,\n      navigation = _ref3.navigation;\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      caption = _useState8[0],\n      setCaption = _useState8[1];\n\n  var currentUser = useSelector(function (state) {\n    return state.user.value;\n  });\n  var image = route.params.image;\n  var localUri = image.uri;\n  var filename = localUri.split(\"/\").pop();\n  var match = /\\.(\\w+)$/.exec(filename);\n  var type = match ? \"image/\" + match[1] : \"image\";\n  var formData = new FormData();\n  formData.append(\"image\", {\n    uri: localUri,\n    name: filename,\n    type: type\n  });\n  formData.append(\"caption\", caption);\n  formData.append(\"user_id\", currentUser.id);\n\n  function handleSubmit() {\n    fetch(\"http://10.129.2.181:3000/post\", {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      navigation.navigate(\"gallery\");\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: image.uri\n      }\n    }), _jsx(TextInput, {\n      style: styles.caption,\n      onChangeText: setCaption,\n      value: caption,\n      placeholder: \"Write a caption\",\n      placeholderTextColor: \"rgba(255, 255, 255, 0.5)\"\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleSubmit();\n      },\n      style: styles.checkmark,\n      children: _jsx(Ionicons, {\n        name: \"ios-checkmark\",\n        size: 25,\n        color: \"black\"\n      })\n    })]\n  });\n}\n\nfunction ImageChoose(_ref4) {\n  var navigation = _ref4.navigation;\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      image = _useState10[0],\n      setImage = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      toggleCamera = _useState12[0],\n      setToggleCamera = _useState12[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              navigation.navigate(\"Photo\", {\n                image: result\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Button, {\n      style: styles.button,\n      title: \"Pick an image from camera roll\",\n      onPress: pickImage\n    }), _jsx(Button, {\n      style: styles.button,\n      title: \"Take A Photo\",\n      onPress: function onPress() {\n        return navigation.navigate(\"Take Picture\");\n      }\n    })]\n  });\n}\n\nfunction Camer() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"gallery\",\n      component: ImageChoose,\n      options: {\n        title: ''\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Take Picture\",\n      component: OptionPicker,\n      options: {\n        title: ''\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"Photo\",\n      component: PhotoTaken,\n      options: {\n        headerRight: function headerRight() {\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return alert(\"This is a button!\");\n            },\n            style: styles.headerButton,\n            children: _jsx(Ionicons, {\n              name: \"ios-checkmark\",\n              size: 25,\n              color: \"black\"\n            })\n          });\n        },\n        title: ''\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: \"transparent\",\n    flexDirection: \"row\",\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: \"flex-end\",\n    alignItems: \"center\"\n  },\n  text: {\n    fontSize: 18,\n    color: \"white\"\n  },\n  captureButton: {\n    backgroundColor: \"black\",\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    borderRadius: 180,\n    marginVertical: 20,\n    width: 75,\n    height: 75\n  },\n  image: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height / 1.5\n  },\n  caption: {\n    marginBottom: 20,\n    width: Dimensions.get(\"window\").width * 0.9,\n    height: 50,\n    borderRadius: 5,\n    paddingLeft: 20,\n    marginTop: 20,\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    backgroundColor: \"black\",\n    color: \"#fff\"\n  },\n  headerButton: {\n    marginRight: 20,\n    height: 25,\n    width: 25\n  },\n  checkmark: {\n    marginRight: \"auto\",\n    marginLeft: \"auto\"\n  }\n});\nexport default Camer;","map":{"version":3,"sources":["/home/mohamed/code/labs/projects/Gram/front-end/instagram/components/Camer.js"],"names":["React","useState","useEffect","ImagePicker","Camera","createStackNavigator","useIsFocused","Ionicons","useSelector","Stack","OptionPicker","navigation","isFocused","photo","setPhoto","hasPermission","setHasPermission","Constants","Type","back","type","setType","camera","takePicture","takePictureAsync","onPictureSaved","uri","navigate","image","console","log","requestCameraPermissionsAsync","status","turnOnCamera","styles","container","ref","buttonContainer","button","front","text","captureButton","PhotoTaken","route","caption","setCaption","currentUser","state","user","value","params","localUri","filename","split","pop","match","exec","formData","FormData","append","name","id","handleSubmit","fetch","method","body","headers","then","response","json","data","checkmark","ImageChoose","setImage","toggleCamera","setToggleCamera","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","Camer","title","headerRight","alert","headerButton","StyleSheet","create","flex","backgroundColor","flexDirection","margin","alignSelf","alignItems","fontSize","color","marginRight","marginLeft","borderRadius","marginVertical","width","height","Dimensions","get","marginBottom","paddingLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Text,\n  View,\n  StyleSheet,\n  TextInput,\n  Image,\n  Button,\n  TouchableOpacity,\n} from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Camera } from \"expo-camera\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { Dimensions } from \"react-native\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { useSelector } from \"react-redux\";\n\nconst Stack = createStackNavigator();\nfunction OptionPicker({ navigation }) {\n  const isFocused = useIsFocused();\n  const [photo, setPhoto] = useState(null);\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  let camera;\n  const takePicture = () => {\n    if (camera) {\n      camera.takePictureAsync({ onPictureSaved: onPictureSaved });\n    }\n  };\n\n  const onPictureSaved = (photo) => {\n    setPhoto(photo.uri);\n    // here we will do the magic after it saves the photo\n    navigation.navigate(\"Photo\", {\n      image: photo,\n    });\n    console.log(\"photo\", photo);\n  };\n  useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n  const turnOnCamera = () => {};\n  return (\n    <View style={styles.container}>\n      {isFocused && (\n        <Camera\n          style={styles.camera}\n          type={type}\n          ref={(ref) => {\n            camera = ref;\n          }}\n        >\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => {\n                setType(\n                  type === Camera.Constants.Type.back\n                    ? Camera.Constants.Type.front\n                    : Camera.Constants.Type.back\n                );\n              }}\n            >\n              <Text style={styles.text}> Flip </Text>\n            </TouchableOpacity>\n          </View>\n        </Camera>\n      )}\n\n      <TouchableOpacity\n        style={styles.captureButton}\n        onPress={() => {\n          takePicture();\n        }}\n      />\n    </View>\n  );\n}\nfunction PhotoTaken({ route,navigation }) {\n  const [caption, setCaption] = useState(\"\");\n  const currentUser = useSelector((state) => state.user.value);\n  const { image } = route.params;\n  let localUri = image.uri;\n  let filename = localUri.split(\"/\").pop();\n\n  // Infer the type of the image\n  let match = /\\.(\\w+)$/.exec(filename);\n  let type = match ? `image/${match[1]}` : `image`;\n  let formData = new FormData();\n  formData.append(\"image\", { uri: localUri, name: filename, type });\n  formData.append(\"caption\", caption);\n  formData.append(\"user_id\", currentUser.id);\n  function handleSubmit() {\n    fetch(\"http://10.129.2.181:3000/post\", {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        \"content-type\": \"multipart/form-data\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(data);\n        navigation.navigate(\"gallery\")\n      });\n  }\n  return (\n    <>\n      <Image style={styles.image} source={{ uri: image.uri }} />\n      <TextInput\n        style={styles.caption}\n        onChangeText={setCaption}\n        value={caption}\n        placeholder=\"Write a caption\"\n        placeholderTextColor=\"rgba(255, 255, 255, 0.5)\"\n      />\n      <TouchableOpacity onPress={() => handleSubmit()} style={styles.checkmark}>\n        <Ionicons name=\"ios-checkmark\" size={25} color=\"black\" />\n      </TouchableOpacity>\n    </>\n  );\n}\nfunction ImageChoose({ navigation }) {\n  const [image, setImage] = useState(null);\n  const [toggleCamera, setToggleCamera] = useState(false);\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      navigation.navigate(\"Photo\", {\n        image: result,\n      });\n    }\n  };\n  return (\n    <>\n      <Button\n        style={styles.button}\n        title=\"Pick an image from camera roll\"\n        onPress={pickImage}\n      />\n      <Button\n        style={styles.button}\n        title=\"Take A Photo\"\n        onPress={() => navigation.navigate(\"Take Picture\")}\n      />\n    </>\n  );\n}\nfunction Camer() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"gallery\" component={ImageChoose} options={{ title: '' }}/>\n      <Stack.Screen\n        name=\"Take Picture\"\n        component={OptionPicker}\n        options={{ title: '' }}\n      />\n      <Stack.Screen\n        name=\"Photo\"\n        component={PhotoTaken}\n        options={{\n          headerRight: () => (\n            <TouchableOpacity\n              onPress={() => alert(\"This is a button!\")}\n              style={styles.headerButton}\n            >\n              <Ionicons name=\"ios-checkmark\" size={25} color=\"black\" />\n            </TouchableOpacity>\n          ),\n          title: ''\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\nconst styles = StyleSheet.create({\n  // mainView:{\n  //      flex: 1, alignItems: 'center', justifyContent: 'center'\n  // },\n  container: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: \"transparent\",\n    flexDirection: \"row\",\n    margin: 20,\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: \"flex-end\",\n    alignItems: \"center\",\n  },\n  text: {\n    fontSize: 18,\n    color: \"white\",\n  },\n  captureButton: {\n    backgroundColor: \"black\",\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    borderRadius: 180,\n    marginVertical: 20,\n    width: 75,\n    height: 75,\n  },\n  image: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height / 1.5,\n  },\n  caption: {\n    marginBottom: 20,\n    width: Dimensions.get(\"window\").width * 0.9,\n    height: 50,\n    borderRadius: 5,\n    paddingLeft: 20,\n    marginTop: 20,\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n    backgroundColor: \"black\",\n    color: \"#fff\",\n  },\n  headerButton: {\n    // backgroundColor: 'black',\n    marginRight: 20,\n    height: 25,\n    width: 25,\n  },\n  checkmark: {\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n  },\n});\nexport default Camer;\n"]},"metadata":{},"sourceType":"module"}