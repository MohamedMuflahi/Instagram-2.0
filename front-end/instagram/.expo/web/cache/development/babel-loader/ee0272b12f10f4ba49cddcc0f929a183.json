{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Post() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasPermission = _useState4[0],\n      setHasPermission = _useState4[1];\n\n  var _useState5 = useState(Camera.Constants.Type.back),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var takePicture = function takePicture() {\n    if (Camera) {\n      Camera.takePictureAsync({\n        onPictureSaved: onPictureSaved\n      });\n    }\n  };\n\n  var onPictureSaved = function onPictureSaved(photo) {\n    console.log(photo);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return _jsx(View, {});\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Camera, {\n      style: styles.camera,\n      type: type,\n      children: _jsxs(View, {\n        style: styles.buttonContainer,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n          },\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \" Flip \"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: styles.captureButton,\n          onPress: function onPress() {\n            takePicture();\n          }\n        })]\n      })\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});\nexport default Post;","map":{"version":3,"sources":["/home/mohamed/code/labs/projects/Gram/front-end/instagram/screens/Post.js"],"names":["React","useState","useEffect","ImagePicker","Camera","Post","image","setImage","hasPermission","setHasPermission","Constants","Type","back","type","setType","takePicture","takePictureAsync","onPictureSaved","photo","console","log","requestCameraPermissionsAsync","status","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","styles","container","camera","buttonContainer","button","front","text","captureButton","StyleSheet","create","flex","backgroundColor","flexDirection","margin","alignSelf","alignItems","fontSize","color"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport { Text,View,StyleSheet,Button,Image,TouchableOpacity} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nfunction Post(){\n    const [image, setImage] = useState(null);\n    const [hasPermission, setHasPermission] = useState(null);\n    const [type, setType] = useState(Camera.Constants.Type.back);\n    const takePicture = () => {\n        if (Camera) {\n            Camera.takePictureAsync({ onPictureSaved: onPictureSaved });\n        }\n     };\n  \n    const onPictureSaved = photo => {\n        console.log(photo);\n    } \n    useEffect(() => {\n      (async () => {\n        const { status } = await Camera.requestCameraPermissionsAsync();\n        setHasPermission(status === 'granted');\n      })();\n    }, []);\n  \n    if (hasPermission === null) {\n      return <View />;\n    }\n    if (hasPermission === false) {\n      return <Text>No access to camera</Text>;\n    }\n\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n        setImage(result.uri);\n    }\n};\n\n    return (\n      <View style={styles.container}>\n        {/* <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />} */}\n        <Camera style={styles.camera} type={type}>\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity\n              style={styles.button}\n              onPress={() => {\n                setType(\n                  type === Camera.Constants.Type.back\n                    ? Camera.Constants.Type.front\n                    : Camera.Constants.Type.back\n                );\n              }}\n            >\n              <Text style={styles.text}> Flip </Text>\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.captureButton} onPress={()=>{takePicture()}} />\n          </View>\n        </Camera>\n      </View>\n    );\n}\nconst styles = StyleSheet.create({\n    // mainView:{\n    //      flex: 1, alignItems: 'center', justifyContent: 'center' \n    // },\n    container: {\n        flex: 1,\n      },\n      camera: {\n        flex: 1,\n      },\n      buttonContainer: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        margin: 20,\n      },\n      button: {\n        flex: 0.1,\n        alignSelf: 'flex-end',\n        alignItems: 'center',\n      },\n      text: {\n        fontSize: 18,\n        color: 'white',\n      },\n})\nexport default Post;"]},"metadata":{},"sourceType":"module"}